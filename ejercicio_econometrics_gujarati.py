# -*- coding: utf-8 -*-
"""Ejercicio - Econometrics Gujarati.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cw4ryei0WasyJx1QO87NWzlZFPur30Ke
"""

# Paso 1: Librerías necesarias
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller
from io import StringIO
from google.colab import files

# Paso 2: Subir archivo
uploaded = files.upload()
file_name = list(uploaded.keys())[0]

# Paso 3: Leer solo las líneas con datos numéricos
with open(file_name, 'r') as f:
    lines = f.readlines()

# Buscar desde la línea que empieza con el primer año
data_start = [i for i, line in enumerate(lines) if line.strip().startswith("1970")][0]
data_lines = lines[data_start:]
columns = ['YEAR', 'GDP', 'PDI', 'PCE', 'PROFITS', 'DIVIDENDS']
data_str = ''.join(data_lines)
df = pd.read_csv(StringIO(data_str), delim_whitespace=True, names=columns)

# Paso 4: Calcular logaritmos naturales
df['LGCP'] = np.log(df['GDP'])               # Log GDP
df['LIPD'] = np.log(df['PDI'])               # Log PDI
df['LUE'] = np.log(df['PROFITS'])            # Log Utilidades empresariales
df['LDIVIDENDOS'] = np.log(df['DIVIDENDS'])  # Log Dividendos

# Paso 5: Función para graficar ACF
def plot_acf_series(series, title):
    fig, ax = plt.subplots(figsize=(8, 4))
    sm.graphics.tsa.plot_acf(series, lags=36, ax=ax)
    ax.set_title(f'Correlograma ACF - {title}')
    plt.tight_layout()
    plt.show()

# Paso 6: Función para prueba Dickey-Fuller aumentada
def test_adf(series, name):
    result = adfuller(series)
    print(f'\n--- Prueba Dickey-Fuller ADF para {name} ---')
    print(f'Estadístico ADF: {result[0]:.4f}')
    print(f'Valor-p: {result[1]:.4f}')
    print('¿Estacionaria?:', 'Sí' if result[1] < 0.05 else 'No')

# Paso 7: Análisis por serie
series_dict = {
    'LGCP (log GDP)': df['LGCP'],
    'LIPD (log PDI)': df['LIPD'],
    'LUE (log Utilidades empresariales)': df['LUE'],
    'LDIVIDENDOS (log Dividendos)': df['LDIVIDENDOS']
}

for name, series in series_dict.items():
    plot_acf_series(series, name)
    test_adf(series, name)